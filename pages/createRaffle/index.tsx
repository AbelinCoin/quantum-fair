import React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { ethers } from "ethers";
import axios from "axios";
import Navbar from "../../components/nav";
import { Proxy } from "../../components/abis/proxy";
import { Raffle } from "../../components/abis/raffle";
import { ERC721 as ERC721ABI } from "../../components/abis/nft";
import {
  LabelName,
  LabelStart,
  LabelEnd,
  LabelWinners,
  LabelDesc,
  LabelRff,
  LabelNft,
  LabelID,
  LabelVF,
  LabelVR,
} from "../../components/styles/label";
import { Input, InputOpen, InputDesc } from "../../components/styles/input";
import { Button } from "../../components/styles/button";
import { Flex } from "../../components/styles/div";
import { Typography } from "../../components/styles/typography";

function Heading() {
  return (
    <>
      <Head>
        <title>Create Raffle | Quantum Fair</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
      </Head>
    </>
  );
}

interface CreateData {
  status: number;
  message: string;
  result: {
    0: {
      contractAddress: string;
    };
  };
}

function CreateRaffle() {
  const vaultFactory = "0xE37F25b41D33AF5A6844aE910C2390d6954f9a61";
  const vaultRouter = "0x04B3ceE98aa97284322CB8591eD3aC33c7a35414";
  const [screen, setScreen] = React.useState(false);
  const [canyed, setCanyed] = React.useState(false);
  // const [copied, setCopied] = React.useState(false);
  const [output, setOutput] = React.useState(false);
  const [name, setName] = React.useState("");
  const [start, setStart] = React.useState("");
  const [end, setEnd] = React.useState("");
  const [winners, setWinners] = React.useState("");
  const [price, setPrice] = React.useState("");
  const [description, setDescription] = React.useState("");
  const [nftContract, setnftContract] = React.useState(""); // 0x38abA480f2bA7A17bC01EE5E1AD64fCedd93EfE7
  const [id, setId] = React.useState(""); // 29
  const [hub, setHub] = React.useState(""); // 0xca11f9ff5fc64de0445b0a64a27f94cc91f6b9d5

  async function create() {
    try {
      const ProxyContract = "0x21f754BEEB1c5d1c9470E8E5a33D8E2526462799";
      const ethereum = (window as any).ethereum;
      const accounts = await ethereum.request({
        method: "eth_requestAccounts",
      });
      const provider = new ethers.providers.Web3Provider(ethereum);
      const walletAddress = accounts[0];
      const signer = provider.getSigner(walletAddress);
      const FairProxy = new ethers.Contract(ProxyContract, Proxy, signer);
      const createRaffle = await FairProxy.createRaffle(
        start,
        end,
        winners,
        price,
        {
          hash: "0xf7baab1baf661869e72d3f70214e394102486912b6ed3872d9bb9d7e36e286c3",
          hash_function: 18,
          size: 32,
        }
      );
      await createRaffle.wait();
      const receipt = await provider.getTransactionReceipt(createRaffle.hash);
      if (receipt.status == 1) {
        const bucle = setInterval(async () => {
          await axios
            .post<CreateData>(
              `https://api-goerli-optimism.etherscan.io/api?module=account&action=txlistinternal&txhash=${createRaffle.hash}&apikey=GBCBJB46CJB6NMCGMR3X5KENZR3P84RUZH`
            )
            .then((getContract) => {
              if (getContract.data.status == 1) {
                setHub(getContract.data.result[0].contractAddress);
                setCanyed(true);
                setScreen(true);
                clearInterval(bucle);
              }
              return getContract;
            });
        }, 3000);
      }
    } catch (err) {
      console.error(err);
    }
  }

  async function Open() {
    // const router = useRouter();
    try {
      const ethereum = (window as any).ethereum;
      const accounts = await ethereum.request({
        method: "eth_requestAccounts",
      });
      const provider = new ethers.providers.Web3Provider(ethereum);
      const walletAddress = accounts[0];
      const signer = provider.getSigner(walletAddress);
      const ERC721 = new ethers.Contract(nftContract, ERC721ABI, signer);
      const RaffleProxy = new ethers.Contract(hub, Raffle, signer);
      const approve = await ERC721.approve(hub, id);
      const approving = await approve.wait();
      if (approving.status == 1) {
        const opener = await RaffleProxy.open(
          [nftContract],
          [id]
        );
        const opening = await opener.wait();
        // if (opening.status == 1) {
        //    router.push(`/raffle?id=${raffleId}`);
        //  }
      }
    } catch (err) {
      console.error(err);
    }
  }

  return (
    <>
      <Heading />
      <Navbar />
      <Flex>
        {screen ? (
          <div
            style={{
              justifyContent: "center",
              background: "#efefef",
              flexDirection: "column",
              alignItems: "center",
              display: "flex",
              transform: "translateY(30px)",
              alignContent: "center",
              zIndex: "1",
            }}
          >
            <Typography>CREATE RAFFLE 2/3</Typography>
            <LabelRff>Raffle Contract</LabelRff>
            <Input value={hub} readOnly={true} />
            <LabelNft>Nft Contract</LabelNft>
            <Input
              onChange={(e) => {
                setnftContract(e.currentTarget.value);
              }}
            />
            <LabelID>Token ID</LabelID>
            <Input
              type="number"
              onChange={(e) => {
                setId(e.currentTarget.value);
              }}
            />
            <LabelVF>Vault Factory</LabelVF>
            <InputOpen value={vaultFactory} readOnly={true} />
            <LabelVR>Vault Router</LabelVR>
            <InputOpen value={vaultRouter} readOnly={true} />
            <Button onClick={Open}>Open</Button>
            <Button
              style={{ transform: "translate(-190px, -60px)" }}
              onClick={() => {
                if (String(hub).length >= 42) {
                  setScreen(false);
                }
              }}
            >
              Back
            </Button>
          </div>
        ) : (
          <div
            style={{
              justifyContent: "center",
              background: "#efefef",
              flexDirection: "column",
              alignItems: "center",
              display: "flex",
              transform: "translateY(30px)",
              alignContent: "center",
              zIndex: "1",
            }}
          >
            <Typography>CREATE RAFFLE 1/3</Typography>
            <LabelName>Raffle Name</LabelName>
            <Input
              type="text"
              onChange={(e) => {
                setName(e.currentTarget.value);
              }}
            />
            <LabelStart>Start</LabelStart>
            <Input
              type="number"
              onChange={(e) => {
                setStart(e.target.value);
              }}
            />
            <LabelEnd>End</LabelEnd>
            <Input
              type="number"
              onChange={(e) => {
                setEnd(e.currentTarget.value);
              }}
            />
            <LabelWinners>NÂ° Winners</LabelWinners>
            <Input
              type="number"
              onChange={(e) => {
                setWinners(e.currentTarget.value);
              }}
            />
            <LabelWinners>Ticker Price</LabelWinners>
            <Input
              type="number"
              onChange={(e) => {
                setPrice(e.currentTarget.value);
              }}
            />
            <LabelDesc>Description</LabelDesc>
            <InputDesc
              onChange={(e) => {
                setDescription(e.currentTarget.value);
              }}
            />
            {canyed ? (
              <Button
                onClick={() => {
                  if (String(hub).length >= 42) {
                    setScreen(true);
                  }
                }}
              >
                Next
              </Button>
            ) : (
              <Button onClick={create}>Create</Button>
            )}
          </div>
        )}
      </Flex>
    </>
  );
}
export default CreateRaffle;
