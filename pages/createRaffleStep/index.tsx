import React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import { ethers } from "ethers";
import axios from "axios";
import Navbar from "../../components/nav";
import { FairHub, Raffle, MultiFaucetNFT } from "../../components/abis";
import {
  LabelName,
  LabelStart,
  LabelEnd,
  LabelWinners,
  LabelDesc,
  LabelRff,
  LabelNft,
  LabelID,
  LabelVF,
  LabelVR,
} from "../../components/styles/label";
import { Input, InputOpen, InputDesc } from "../../components/styles/input";
import { Button } from "../../components/styles/button";
import { Flex } from "../../components/styles/div";
import { Typography } from "../../components/styles/typography";

function Heading() {
  return (
    <>
      <Head>
        <title>Create Raffle | Quantum Fair</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
      </Head>
    </>
  );
}

interface CreateData {
  status: number;
  message: string;
  result: {
    0: {
      contractAddress: string;
    };
  };
}
const router=useRouter
function CreateRaffleStep() {
  const vaultFactory = "";
  const vaultRouter = "";
  const [screen, setScreen] = React.useState(false);
  const [canyed, setCanyed] = React.useState(false);
  // const [copied, setCopied] = React.useState(false);
  const [output, setOutput] = React.useState(false);
  const [name, setName] = React.useState("");
  const [start, setStart] = React.useState("");
  const [end, setEnd] = React.useState("");
  const [winners, setWinners] = React.useState("");
  const [description, setDescription] = React.useState("");
  const [nftContract, setnftContract] = React.useState(""); // 0xf5de760f2e916647fd766B4AD9E85ff943cE3A2b
  const [id, setId] = React.useState(""); // 3667556
  const [hub, setHub] = React.useState(""); // 0x38113c10459349fc6e3e65e2c82428781110d5b5

  async function create() {
    try {
      const FairContract = "0x7E0755a50E1C3b2BB8AbECE23F139Be25B8D5348";
      const ethereum = (window as any).ethereum;
      const accounts = await ethereum.request({
        method: "eth_requestAccounts",
      });
      const provider = new ethers.providers.Web3Provider(ethereum);
      const walletAddress = accounts[0];
      const signer = provider.getSigner(walletAddress);
      const FairProxy = new ethers.Contract(FairContract, FairHub, signer);
      const createRaffle = await FairProxy.createRaffle(start, end, winners, {
        hash: "0xf7baab1baf661869e72d3f70214e394102486912b6ed3872d9bb9d7e36e286c3",
        hash_function: 18,
        size: 32,
      });
      await createRaffle.wait();
      const receipt = await provider.getTransactionReceipt(createRaffle.hash);
      if (receipt.status == 1) {
        const bucle = setInterval(async () => {
          await axios
            .post<CreateData>(
              `https://api-goerli.etherscan.io/api?module=account&action=txlistinternal&txhash=${createRaffle.hash}&apikey=GBCBJB46CJB6NMCGMR3X5KENZR3P84RUZH`
            )
            .then((getContract) => {
              if (getContract.data.status == 1) {
                setHub(getContract.data.result[0].contractAddress);
                setCanyed(true);
                setScreen(true);
                clearInterval(bucle);
              }
              return getContract;
            });
        }, 3000);
      }
    } catch (err) {
      console.error(err);
    }
  }

  async function open() {
    try {
      const FaucetContract = nftContract;
      const ethereum = (window as any).ethereum;
      const accounts = await ethereum.request({
        method: "eth_requestAccounts",
      });
      const provider = new ethers.providers.Web3Provider(ethereum);
      const walletAddress = accounts[0];
      const signer = provider.getSigner(walletAddress);
      const MultiFaucet = new ethers.Contract(
        FaucetContract,
        MultiFaucetNFT,
        signer
      );
      const RaffleProxy = new ethers.Contract(hub, Raffle, signer);
      const approve = await MultiFaucet.approve(hub, id);
      const approving = await approve.wait();
      if (approving.status == 1) {
        const opener = await RaffleProxy.open(
          vaultFactory,
          vaultRouter,
          [nftContract],
          [id]
        );
        const opening = await opener.wait();
        if (opening.status == 1) {
          setOutput(true);
        }
      }
    } catch (err) {
      console.error(err);
    }
  }

  return (
    <>
      <Heading />
      <Navbar />
        <div
          className="flex flex-col justify-center content-center	items-center	bg-white w-full min-w-fit px-6"
        >
          <div className="flex flex-col mt-16">
            <span className="text-5xl font-bold text-primary-purple text-center">Launch FairShow</span>
            <span className="text-base font-normal text-primary-purple mt-2 text-center">All the apps you need to pick random winners from everywhere!</span>
          </div>

          <div className="flex justify-between mt-24 w-[478px]">
            <img src="https://github.com/AbelinCoin/Blog-Des-orden-files/blob/main/bar.png?raw=true" alt="bar progres" />
          </div>

          <div className="flex justify-between w-[408px]">
            <div className="flex flex-col justify-start text-center">
              <span className="text-2xl font-bold text-primary-purple mt-5">Step 1</span>
              <span className="text-base font-bold text-light-purple">Main raffle data</span>
            </div>

            <div className="flex flex-col justify-end text-center">
              <span className="text-2xl font-bold text-dark-grey mt-5">Step 2</span>
              <span className="text-base font-bold text-light-grey">Technical data</span>
            </div>
          </div>

          <div className="mt-[6.563rem] flex flex-col-reverse gap-4 md:flex-row content-center justify-between w-560 md:px-0 px-12">

            <div className="flex flex-col w-full md:w-[330px]">
              <label className="text-base font-bold text-primary-purple mb-1">Raffle contract</label>
              <input 
              className="h-10 rounded-lg border border-primary-purple  bg-bg-grey"
              value={hub} readOnly={true} />

              <label className="text-base font-bold text-primary-purple mt-4 mb-1">Nft Contract</label>
              <input
                className="h-10 rounded-lg border border-primary-purple  bg-bg-grey"
                onChange={(e) => {
                  setnftContract(e.currentTarget.value);
                }}
              />

              <label className="text-base font-bold text-primary-purple mt-4 mb-1">Token ID</label>
              <input
                className="h-10 rounded-lg border border-primary-purple  bg-bg-grey"
                type="number"
                onChange={(e) => {
                  setId(e.currentTarget.value);
                }}
              />
            </div>

            <div className="flex flex-col">
              <span className="text-base font-bold text-primary-purple mb-1">NFT</span>  
              <img className="md:object-fill md:w-[190px] md:h-[210px] w-full h-[360px] md:mb-0 mb-12 object-cover rounded-lg border border-primary-purple" src="https://github.com/AbelinCoin/Blog-Des-orden-files/blob/main/image%2056.png?raw=true" alt="" />
            </div>

          </div>

          <div className="mt-20 flex flex-col-reverse gap-4 md:flex-row content-center justify-between w-560 md:px-0 px-12">
            <div className="flex flex-col w-full">
              <label className="text-base font-bold text-primary-purple mt-4 mb-1">Vault Factory</label>
              <input 
              className="h-10 md:h-14 rounded-lg border border-primary-purple  bg-bg-grey"
              value={vaultFactory} readOnly={true} />

              <label className="text-base font-bold text-primary-purple mt-4 mb-1">Vault Router</label>
              <input 
              className="h-10 md:h-14 rounded-lg border border-primary-purple  bg-bg-grey"
              value={vaultRouter} readOnly={true} />
            </div>
          </div>


          {/* <button
            className=""
            onClick={() => {
              if (String(hub).length >= 42) {
                setScreen(false);
              }
            }}
          >
            Back
          </button> */}

          <div className="mt-20 w-560 md:px-0 px-12">
            <div className="flex content-center justify-center items-center w-full md:h-[78px] h-14 rounded-lg border border-blue bg-grey-blue">
              <span className="text-centert font-normal text-base py-4 px-2 text-secondary-blue">Please include the IG Post URL if you are having payment, any app issues or requesting an Invoice</span>
            </div>
          </div>

          <div className="flex justify-end w-560 md:px-0 px-12 mt-9">
              <div className="flex flex-col">
                <div className="flex justify-start content-center items-center w-60 h-14 rounded-lg border border-primary-purple  bg-bg-grey">
                  <button
                  type="submit"
                  className="ml-4 w-6 h-6 rounded border border-primary-purple  bg-white">
                  </button>
                  <span className="ml-4 font-bold text-base text-primary-purple">Im not a robot!</span>
                </div>
                
                <div className="flex justify-end mt-6 mb-[133px]"> 
                  <button
                  className="h-10 w-[140px] rounded-lg border bg-secondary-purple font-bold text-base text-white" 
                  onClick={open}>
                    Finished!
                  </button>
                </div>
              </div>
            </div>

        </div>
    </>
  );
}
export default CreateRaffleStep;
