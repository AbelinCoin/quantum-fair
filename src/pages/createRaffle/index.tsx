import React from "react";
import Head from "next/head";
import { FormLabel, Input, Stack, Flex, Button, Text } from "@chakra-ui/react";
import useSmartContract from "../../hooks/useSmartContract";

function Heading() {
  return (
    <>
      <Head>
        <title>Create Raffle | Quantum Fair</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
      </Head>
    </>
  );
}

function CreateRaffle() {
  const { create, open } = useSmartContract();
  const vaultFactory = "0xE37F25b41D33AF5A6844aE910C2390d6954f9a61";
  const vaultRouter = "0x04B3ceE98aa97284322CB8591eD3aC33c7a35414";
  const [screen, setScreen] = React.useState(false);
  const [canyed, setCanyed] = React.useState(false);
  // const [copied, setCopied] = React.useState(false);
  const [name, setName] = React.useState("");
  const [start, setStart] = React.useState("");
  const [end, setEnd] = React.useState("");
  const [winners, setWinners] = React.useState("");
  const [price, setPrice] = React.useState("");
  const [description, setDescription] = React.useState("");
  const [nftContract, setnftContract] = React.useState(""); // 0x38abA480f2bA7A17bC01EE5E1AD64fCedd93EfE7
  const [id, setId] = React.useState(""); // 29
  const [hub, setHub] = React.useState(""); // 0xca11f9ff5fc64de0445b0a64a27f94cc91f6b9d5

  return (
    <>
      <Heading />
      <Stack minH={"100vh"} direction={{ base: "column", md: "row" }}>
        <Flex p={8} flex={1} align={"center"} justify={"center"}>
          {screen ? (
            <Stack spacing={4} w={"full"} maxW={"md"}>
              <Text>CREATE RAFFLE 2/3</Text>
              <FormLabel>Raffle Contract</FormLabel>
              <Input type="email" value={hub} readOnly={true} />
              <FormLabel>Nft Contract</FormLabel>
              <Input
                onChange={(e) => {
                  setnftContract(e.currentTarget.value);
                }}
              />
              <FormLabel>Token ID</FormLabel>
              <Input
                type="number"
                onChange={(e) => {
                  setId(e.currentTarget.value);
                }}
              />
              <FormLabel>Vault Factory</FormLabel>
              <Input value={vaultFactory} readOnly={true} />
              <FormLabel>Vault Router</FormLabel>
              <Input value={vaultRouter} readOnly={true} />
              <Button
                onClick={async () => {
                  await open(nftContract, hub, id);
                }}
              >
                Open
              </Button>
              <Button
                style={{ transform: "translate(-190px, -60px)" }}
                onClick={() => {
                  if (String(hub).length >= 42) {
                    setScreen(false);
                  }
                }}
              >
                Back
              </Button>
            </Stack>
          ) : (
            <Stack spacing={4} w={"full"} maxW={"md"}>
              <Text>CREATE RAFFLE 1/3</Text>
              <FormLabel>Raffle Name</FormLabel>
              <Input
                type="text"
                onChange={(e) => {
                  setName(e.currentTarget.value);
                }}
              />
              <FormLabel>Start</FormLabel>
              <Input
                type="number"
                onChange={(e) => {
                  setStart(e.target.value);
                }}
              />
              <FormLabel>End</FormLabel>
              <Input
                type="number"
                onChange={(e) => {
                  setEnd(e.currentTarget.value);
                }}
              />
              <FormLabel>NÂ° Winners</FormLabel>
              <Input
                type="number"
                onChange={(e) => {
                  setWinners(e.currentTarget.value);
                }}
              />
              <FormLabel>Ticker Price</FormLabel>
              <Input
                type="number"
                onChange={(e) => {
                  setPrice(e.currentTarget.value);
                }}
              />
              <FormLabel>Description</FormLabel>
              <Input
                onChange={(e) => {
                  setDescription(e.currentTarget.value);
                }}
              />
              {canyed ? (
                <Button
                  onClick={() => {
                    if (String(hub).length >= 42) {
                      setScreen(true);
                    }
                  }}
                >
                  Next
                </Button>
              ) : (
                <Button
                  onClick={async () => {
                    await create(start, end, winners, price).then((fair) =>
                      setHub(fair.data)
                    );
                  }}
                >
                  Create
                </Button>
              )}
            </Stack>
          )}
        </Flex>
      </Stack>
    </>
  );
}
export default CreateRaffle;
